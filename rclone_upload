#!/bin/bash

###############################################################################
#######################   Upload Script Version 0.98.0   ######################
###############################################################################

##################################################
############ EDIT ONLY THESE SETTINGS ############
# 1. Edit the settings below to match your setup
# 2. NOTE: enter RcloneRemoteName WITHOUT ':'
# 3. Optional: Use backup directory for rclone jobs
# 4. Optional: Use bind mount settings for potential traffic shaping/monitoring
# 5. Optional: Use service accounts in your remote uploads
# 6. Optional: Add additional commands or filters

# REQUIRED SETTINGS
RemoteBackupJobEnabled="Y" # Y/N. Syncs or Copies files from LocalFilesLocation to BackupLocation, rather than moving from LocalFilesLocation/RcloneRemoteName
LocalBackupEnabled="Y" # Y/N. Enables rclone to also backup to a local folder/external drive. If N, rclone will only backup to the remote.
LocalBackupDir="/mnt/disks/ZRS135F4" # If enabled, path to your local backup. Will be created if it doesn't exist.
LocalBackupDeviceToMount="/dev/sda" # If enabled, make sure this points to the local external disk you will use to backup
LocalFilesShare="/mnt/user" # location of the local files WITHOUT trailing slash to be uploaded/backed up
RcloneCommand="sync" # choose your rclone command e.g. move, copy, sync
RcloneRemoteName="gduva" # Name of rclone remote mount WITHOUT ':'
RcloneMountName="gduva" # If you have a mount that is different from RcloneRemoteName, put here. Not enabled right now...
RcloneMountShare="/mnt/user/remote" # where your rclone mount is located without trailing slash  e.g. /mnt/user/mount_rclone
RcloneFilterFile="/mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/rclone_filters.txt"
ModSort="ascending" # "ascending" oldest files first, "descending" newest files first

# Rclone Remote Bandwidth limits: specify the desired bandwidth in kBytes/s, or use a suffix b|k|M|G, or 'off'/'0' for unlimited. --drive-stop-on-upload-limit is enabled and stops the script
RcloneBWLimit1Time="01:00"
RcloneBWLimit1BW="off"
RcloneBWLimit2Time="08:00"
RcloneBWLimit2BW="off"
RcloneBWLimit3Time="16:00"
RcloneBWLimit3BW="off"

# Rclone Remote Bind the mount to an IP address
RcloneBindMountIPEnabled="N" # Y/N. Choose whether or not to bind traffic to a network adapter
RcloneMountIP="192.168.1.46" # Choose IP to bind upload to
NetworkAdapter="eth0" # choose your network adapter. eth0 recommended
VirtualIPNumber="1" # creates eth0:x e.g. eth0:1

# Rclone Remote Service Accounts, see: https://github.com/xyou365/AutoRclone
UseServiceAccountUpload="N" # Y/N Choose whether to use Service Accounts
ServiceAccountDirectory="/mnt/user/appdata/other/rclone/service_accounts" # Path to your Service Account's .json files
ServiceAccountFile="sa_gdrive_upload" # Enter characters before counter in your json files e.g. for sa_gdrive_upload1.json -->sa_gdrive_upload100.json, enter "sa_gdrive_upload"
CountServiceAccounts="15" # Integer number of service accounts to use

# If this is a backup job, run these settings
HOSTNAME=$(uname -n)
BackupLocation="$HOSTNAME-backup" # Choose location on mount for deleted sync files, leave blank for root
BackupDeletedLocation="$HOSTNAME-backup-deleted" # choose location on mount for deleted sync files
BackupRemoteDeletedRetention="90d" # How long to keep deleted sync files suffix ms|s|m|h|d|w|M|y

############ OPTIONAL SETTINGS ############
# Add extra commands for rclone (either the remote backup or the local backup)
RcloneRemoteCommand1=""
RcloneRemoteCommand2=""
RcloneRemoteCommand3=""
RcloneLocalCommand1="--include data/media/music/**"
RcloneLocalCommand2=""
RcloneLocalCommand3=""

# Create the filter file with the necessary rules. Comment the filter file out if you don't want to back up appdata
timestamp=$(date "+%d.%m.%Y %T")
echo "$timestamp INFO: Creating filter file..."

cat <<EOF > "$RcloneFilterFile"
# Since the default rclone LocalFilesShare command include all folders in /mnt/user/, exclude main data and unraid folders
- /data/**
- /domains/**
- /isos/**
- /system/**

# Exclude specific hidden and temporary files
- *fuse_hidden*
- *_HIDDEN
- .recycle**
- .Recycle.Bin/**
- *.backup~*
- *.partial~*

# If appdata is included, include only necessary backup folders
- **plex/Library/Application Support/Plex Media Server/Cache/**
- **plex/Library/Application Support/Plex Media Server/Codecs/**
- **plex/Library/Application Support/Plex Media Server/Crash Reports/**
- **plex/Library/Application Support/Plex Media Server/Media/**
- **plex/Library/Application Support/Plex Media Server/Metadata/**
- **plex/Library/Application Support/Plex Media Server/Logs/**
- **plex/Library/Application Support/Plex Media Server/Scanners/**
- **other/**
- **jackett/**
- **QDirStat/**
+ **radarr/Backups/**
- **radarr/**
+ **sonarr/Backups/**
- **sonarr/**
+ **lidarr/Backups/**
- **lidarr/**
EOF

echo "$timestamp INFO: Filter file created at $RcloneFilterFile..."

###############################################################################
################################ END SETTINGS #################################
#####    DO NOT EDIT BELOW THIS LINE UNLESS YOU KNOW WHAT YOU ARE DOING   #####
###############################################################################

##################################################
################ SCRIPT FUNCTIONS ################
##################################################

# Function to create the directory
create_directory() {
    mkdir -p "$LocalBackupDir/$BackupLocation" && chmod 755 "$LocalBackupDir/$BackupLocation"
    return $?
}

# Function to mount the disk
mount_disk() {
    mount "$LocalBackupDeviceToMount" "$LocalBackupDir/$BackupLocation"
    return $?
}

# Function to handle retry logic
handle_retry() {
    while [[ ! -d "$LocalBackupDir/$BackupLocation" && $LocalBackupRetryCount -le $LocalBackupMaxRetries ]]; do
        echo "$timestamp WARNING: Local backup directory $LocalBackupDir/$BackupLocation not found. Attempting to create..."

        create_directory
        if [[ $? -ne 0 ]]; then
            echo "$timestamp ERROR: Failed to create local backup directory $LocalBackupDir/$BackupLocation. Attempting to mount disk..."
            
            # Try mounting the disk
            mount_disk
            if [[ $? -ne 0 ]]; then
                echo "$timestamp ERROR: Failed to mount local backup directory $LocalBackupDir/$BackupLocation. Exiting..."
            fi
            echo "$timestamp INFO: Local backup directory $LocalBackupDir/$BackupLocation mounted successfully!"
            
            LocalBackupRetryCount=$((LocalBackupRetryCount + 1))

            # Retry directory creation after mounting
            echo "$timestamp INFO: Retrying folder creation after mounting..."
        else
            echo "$timestamp INFO: Local backup directory $LocalBackupDir/$BackupLocation created successfully!"
            break
        fi
    done
}

# Function to start docker containers
start_docker_containers() {
    for container in $(docker ps -a -q); do
        echo "$timestamp INFO: Starting Docker container $container..."
        docker start "$container"
    done

    # Sleep to ensure all containers are fully started
    echo "$timestamp INFO: Docker containers started. Waiting to ensure all containers are running..."
    sleep 10
}

# Function to stop all Docker containers
stop_docker_containers() {
    for container in $(docker ps -q); do
        echo "$timestamp INFO: Stopping Docker container $container..."
        docker stop "$container"
    done

    # Sleep to ensure all containers are fully stopped
    echo "$timestamp INFO: Waiting for Docker containers to stop..."
    sleep 10
}

##################################################
############ RCLONE SPECIFIC SETTINGS ############
########### Check if rclone installed ###########
echo "$timestamp INFO: Checking if rclone installed successfully..."
if command -v rclone &> /dev/null; then
	echo "$timestamp INFO: rclone installed successfully - proceeding with upload..."
else
	echo "$timestamp INFO: rclone not installed - will try again later...."
	exit
fi

############ Preparing mount location variables & files ############
if [[ $RemoteBackupJobEnabled == 'Y' ]]; then
	LocalFilesLocation="$LocalFilesShare"
	echo "$timestamp INFO: *** Backup selected. Files will be copied or synced from ${LocalFilesLocation} for ${RcloneRemoteName} ***..."
else
	LocalFilesLocation="$LocalFilesShare/$RcloneRemoteName"
	echo "$timestamp INFO: *** Rclone move selected. Files will be moved from ${LocalFilesLocation} for ${RcloneRemoteName} ***..."
fi

RcloneMountLocation="$RcloneMountShare/$RcloneRemoteName" # Location of rclone mount

############ Create directory for script files ############
mkdir -p /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName # for script files

############ If LocalBackupEnabled is true, check if local backup directory is available, if not, create it or mount it ############
LocalBackupMaxRetries=1  # Max retries after mounting
LocalBackupRetryCount=0  # Retry count

############ Main LocalBackupEnabled Execution ############
if [[ "$LocalBackupEnabled" == "Y" ]]; then
    echo "$timestamp INFO: Local backup is enabled. Checking if local backup directory exists..."

    # Start the retry process
    handle_retry

    # If directory still doesn't exist after retries, proceed thru
    if [[ ! -d "$LocalBackupDir/$BackupLocation" ]]; then
        echo "$timestamp ERROR: Failed to create local backup directory $LocalBackupDir/$BackupLocation after $LocalBackupMaxRetries retries. Exiting..."
    fi

    # Proceed with backup or other tasks
else
    echo "$timestamp INFO: Local backup is disabled. Skipping backup steps."
fi

############ Rotating serviceaccount.json file if using Service Accounts ############
if [[ $UseServiceAccountUpload == 'Y' ]]; then
	cd /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/
	CounterNumber=$(find -name 'counter*' | cut -c 11,12)
	CounterCheck="1"
	if [[ "$CounterNumber" -ge "$CounterCheck" ]];then
		echo "$timestamp INFO: Counter file found for ${RcloneRemoteName}...."
	else
		echo "$timestamp INFO: No counter file found for ${RcloneRemoteName}. Creating counter_1...."
		touch /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/counter_1
		CounterNumber="1"
	fi
	ServiceAccount="--drive-service-account-file=$ServiceAccountDirectory/$ServiceAccountFile$CounterNumber.json"
	echo "$timestamp INFO: Adjusted service_account_file for upload remote ${RcloneRemoteName} to ${ServiceAccountFile}${CounterNumber}.json based on counter ${CounterNumber}..."
else
	echo "$timestamp INFO: Uploading using upload remote ${RcloneRemoteName}..."
	ServiceAccount=""
fi

############ Check bind option ############
if [[ $RcloneBindMountIPEnabled == 'Y' ]]; then
	echo "$timestamp INFO: *** Checking if IP address ${RcloneMountIP} already created for upload to remote ${RcloneRemoteName}..."
	ping -q -c2 $RcloneMountIP > /dev/null # -q quiet, -c number of pings to perform
	if [ $? -eq 0 ]; then # ping returns exit status 0 if successful
		echo "$timestamp INFO: *** IP address ${RcloneMountIP} already created for upload to remote ${RcloneRemoteName}..."
	else
		echo "$timestamp INFO: *** Creating IP address ${RcloneMountIP} for upload to remote ${RcloneRemoteName}..."
		ip addr add $RcloneMountIP/24 dev $NetworkAdapter label $NetworkAdapter:$VirtualIPNumber
	fi
else
	RcloneMountIP=""
fi

############ Remove --delete-empty-src-dirs if rclone sync or copy ############
if [[ $RcloneCommand == 'move' ]]; then
	echo "$timestamp INFO: *** Using rclone move - will add --delete-empty-src-dirs to upload..."
	DeleteEmpty="--delete-empty-src-dirs "
else
	echo "$timestamp INFO: *** Not using rclone move - will remove --delete-empty-src-dirs to upload..."
	DeleteEmpty=""
fi

############ Check --backup-directory ############
if [[ $RemoteBackupJobEnabled == 'Y' ]]; then
	echo "$timestamp INFO: *** Will backup to ${BackupLocation} and use  ${BackupDeletedLocation} as --backup-directory with ${BackupRemoteDeletedRetention} retention for ${RcloneRemoteName}..."
	LocalFilesLocation="$LocalFilesShare"
	RcloneRemoteBackupDir="--backup-dir $RcloneRemoteName:$BackupDeletedLocation"
else
	BackupLocation=""
	BackupDeletedLocation=""
	BackupRemoteDeletedRetention=""
	RcloneRemoteBackupDir=""
fi

##################################################
########## BEGIN RCLONE APPDATA COMMANDS #########
##################################################

echo "$timestamp INFO: Beginning rclone commands..."

############ appdata Remote Backup ############
# Check if appdata is included in the upload. If yes, stop Docker containers to prevent corrupted upload and backup appdata
echo "$timestamp INFO: Starting rclone backup for appdata if it is included in the upload..."

if find "$LocalFilesLocation" -type d -name "appdata" | grep -q "/mnt/user/appdata"; then
    echo "$timestamp INFO: appdata detected in the upload, stopping all Docker containers..."

    # Stop all Docker containers before backup to prevent uploading corrupted appdata
    if [ $(docker ps -q | wc -l) -gt 0 ]; then
        stop_docker_containers

    else
    echo "$timestamp INFO: No Docker containers running, skipping stop..."
    fi

    # Sleep to ensure all containers are fully stopped
    sleep 10

    # Perform rclone backup for appdata to remote
    echo "$timestamp INFO: Starting remote backup for appdata..."
    rclone $RcloneCommand "$LocalFilesLocation/appdata" "$RcloneRemoteName:$BackupLocation/appdata" $ServiceAccount $RcloneRemoteBackupDir \
        -vv \
        --buffer-size 512M \
        --drive-chunk-size 512M \
        --tpslimit 8 \
        --checkers 8 \
        --transfers 4 \
        --order-by modtime,$ModSort \
        --filter-from "$RcloneFilterFile" \
        --bwlimit "${RcloneBWLimit1Time},${RcloneBWLimit1BW} ${RcloneBWLimit2Time},${RcloneBWLimit2BW} ${RcloneBWLimit3Time},${RcloneBWLimit3BW}" \
        --bind=$RcloneMountIP $DeleteEmpty
else
    echo "$timestamp INFO: /mnt/user/appdata not detected in the upload. Skip stopping Docker containers..."
fi

############ appdata Local Backup ############
# Check if the remote appdata backup was successful
if [ $? -eq 0 ]; then
    echo "$timestamp INFO: Finished appdata remote backup..."

    # If LocalBackupEnabled is true, perform local backup for appdata
    if [[ $LocalBackupEnabled == 'Y' ]]; then
        echo "$timestamp INFO: Local backup enabled, starting local backup for appdata..."
        rclone $RcloneCommand "$LocalFilesLocation/appdata" "$LocalBackupDir/$BackupLocation/appdata" \
            -vv \
            --buffer-size 512M \
            --drive-chunk-size 512M \
            --tpslimit 8 \
            --checkers 8 \
            --transfers 4 \
            --order-by modtime,$ModSort \
            --filter-from "$RcloneFilterFile" \
            --bind=$RcloneMountIP $DeleteEmpty

        echo "$timestamp INFO: Finished local appdata backup..."

        # After rclone complete, start Docker containers
        start_docker_containers

    # If LocalBackupEnabled is false, start Docker containers again
    else 
        echo "$timestamp INFO: Local backup not enabled, starting Docker containers..."
        start_docker_containers
    fi
else
    echo "$timestamp ERROR: Remote appdata backup failed. Skipping local backup for appdata and ensuring docker containers are started..."
    start_docker_containers
fi

##################################################
############ BEGIN RCLONE DATA COMMANDS ##########
##################################################

############ After appdata backup is completed, proceed with the rest of the data
echo "$timestamp INFO: Starting backup for the rest of the files..."

############ Data Remote Backup ############
# Perform remote backup for the rest of the files, excluding appdata #
rclone $RcloneCommand "$LocalFilesLocation" "$RcloneRemoteName:$BackupLocation" $ServiceAccount $RcloneRemoteBackupDir \
    -vv \
    --buffer-size 512M \
    --drive-chunk-size 512M \
    --tpslimit 8 \
    --checkers 8 \
    --transfers 4 \
    --order-by modtime,$ModSort \
    --filter-from "$RcloneFilterFile" \
    --exclude "appdata/**" \
    --bwlimit "${RcloneBWLimit1Time},${RcloneBWLimit1BW} ${RcloneBWLimit2Time},${RcloneBWLimit2BW} ${RcloneBWLimit3Time},${RcloneBWLimit3BW}" \
    $RcloneRemoteCommand1 $RcloneRemoteCommand2 $RcloneRemoteCommand3 \
    --bind=$RcloneMountIP $DeleteEmpty

# Check if the remote backup was successful
if [ $? -eq 0 ]; then
    echo "$timestamp INFO: Finished remote backup for the rest of the files..."

############ Data Local Backup ############
    # If LocalBackupEnabled is on, perform local backup for the rest of the files, excluding appdata
    if [[ $LocalBackupEnabled == 'Y' ]]; then
        echo "$timestamp INFO: Starting local backup for the rest of the files..."

        rclone $RcloneCommand "$LocalFilesLocation" "$LocalBackupDir/$BackupLocation" \
            -vv \
            --buffer-size 512M \
            --drive-chunk-size 512M \
            --tpslimit 8 \
            --checkers 8 \
            --transfers 4 \
            --order-by modtime,$ModSort \
            --filter-from "$RcloneFilterFile" \
            --exclude "appdata/**" \
            $RcloneLocalCommand1 $RcloneLocalCommand2 $RcloneLocalCommand3 \
            --bind=$RcloneMountIP $DeleteEmpty 
            
        echo "$timestamp INFO: Finished local backup for the rest of the files..."

    else
        echo "$timestamp INFO: Local backup not enabled, skipping..."
    fi
else
    echo "$timestamp ERROR: Remote backup for the rest of the files failed..."
fi

echo "$timestamp INFO: *** Completed rclone command..."

##################################################
########### BEGIN RCLONE CLEANUP COMMANDS ########
##################################################

# If backup job enabled, delete old backup files from mount
if [[ $RemoteBackupJobEnabled == 'Y' ]]; then
	echo "$timestamp INFO: *** Removing files older than ${BackupRemoteDeletedRetention} from $BackupLocation for ${RcloneRemoteName}..."
	rclone delete --min-age $BackupRemoteDeletedRetention $RcloneRemoteName:$BackupDeletedLocation
fi

# After the rclone command finishes, if we stopped docker containers, start them again
if find "$LocalFilesLocation" -type d -name "appdata" | grep -q "/mnt/user/appdata"; then
    echo "$timestamp INFO: Starting all Docker containers after upload..."

    # Start all Docker containers after backup
    start_docker_containers
fi

# Update counter and remove other control files
if [[ $UseServiceAccountUpload == 'Y' ]]; then
	if [[ "$CounterNumber" == "$CountServiceAccounts" ]];then
		rm /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/counter_*
		touch /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/counter_1
		echo "$timestamp INFO: Final counter used - resetting loop and created counter_1..."
	else
		rm /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/counter_*
		CounterNumber=$((CounterNumber+1))
		touch /mnt/user/appdata/other/rclone/remotes/$RcloneRemoteName/counter_$CounterNumber
		echo "$timestamp INFO: Created counter_${CounterNumber} for next upload run..."
	fi
else
	echo "$timestamp INFO: Not utilising service accounts..."
fi

echo "$timestamp INFO: Script complete"

exit